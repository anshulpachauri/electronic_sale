# Importing necessary libraries
import pandas as pd
import os
import warnings
warnings.filterwarnings('ignore')

# Merging 12 months of sales data into a single file
## Reading and concatenating data
df = pd.read_csv("./Sales_Data/Sales_April_2019.csv")
files = [file for file in os.listdir('./Sales_Data') ]
all_months_data = pd.DataFrame()
for file in files:
    df = pd.read_csv("./Sales_Data/"+file)
    all_months_data = pd.concat([all_months_data, df])
all_months_data.to_csv("all_data.csv", index= False)

# Read in updated DataFrame
all_data = pd.read_csv("all_data.csv")
all_data.head() 

# Cleaning Up the data 
## Dropping rows with NaN values
nan_df = all_data[all_data.isna().any(axis=1)]
all_data = all_data.dropna(how='all')

## Finding and deleting 'Or' in the 'Order Date' column
all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']

## Converting columns to the correct type 
all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

# Augment data with additional Columns
## Adding a Month Column
all_data['Month'] = all_data['Order Date'].str[0:2].astype('int32')

## Adding a Sales Column
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']

## Adding a City Column
def get_city(address):
    return address.split(',')[1]

def get_state(address):
    return address.split(',')[2].split(' ')[1] 

all_data['City'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)} ({get_state(x)})")

# Analysis
## 1. Best month for sales and total earnings
results = all_data.groupby('Month').sum()['Sales']
import matplotlib.pyplot as plt
months = range(1, 13)
plt.bar(months, results)
plt.xticks(months)
plt.ylabel('Sales in US($)')
plt.xlabel('Months')
plt.show()

## 2. City with the highest number of sales
results = all_data.groupby('City').sum()['Sales']
import matplotlib.pyplot as plt
cities = [city for city, df in all_data.groupby('City')]
plt.bar(cities, results)
plt.xticks(cities, rotation='vertical', size=8)
plt.ylabel('Sales in US($)')
plt.xlabel('US City Name')
plt.show()

## 3. Ideal time for advertisements
all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])
all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
hours = [hour for hour, df in all_data.groupby('Hour')]
plt.plot(hours, all_data.groupby(['Hour']).count())
plt.xticks(hours)
plt.xlabel('Hours')
plt.ylabel('Number of Orders')
plt.grid()
plt.show()

## 4. Products often sold together
df = all_data[all_data['Order ID'].duplicated(keep=False)]
df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))
df = df[['Order ID', 'Grouped']].drop_duplicates()

from itertools import combinations
from collections import Counter

count = Counter()
for row in df['Grouped']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list, 2)))

for key, value in count.most_common(5):
    print(key, value)

## 5. Best-selling product and its correlation with price
product_group = all_data.groupby('Product')
quantity_ordered = product_group['Quantity Ordered'].sum()
plt.bar(quantity_ordered.index, quantity_ordered.values)
plt.xlabel('Product')
plt.ylabel('Quantity Ordered')
plt.title('Total Quantity Ordered for Each Product')
plt.xticks(rotation='vertical')
plt.show()

all_data['Price Each'] = pd.to_numeric(all_data['Price Each'], errors='coerce')
prices = all_data.groupby('Product')['Price Each'].mean()
print(prices)

# Plotting sales and price together
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'], errors='coerce')
quantity_ordered = all_data.groupby('Product')['Quantity Ordered'].sum()
prices = all_data.groupby('Product')['Price Each'].mean()

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.bar(quantity_ordered.index, quantity_ordered, color='y')
ax2.plot(prices.index, prices, color='b')

ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color='y')
ax2.set_ylabel('Price ($)', color='b')
ax1.set_xticklabels(quantity_ordered.index, rotation='vertical', size=8)

plt.show()
